AudioWorkletProcessor.prototype._K1=function(){this._L1=true;this.port.onmessage=(_M1)=>{if(_M1.data==="kill")this._L1=false;};};class _N1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._K1();}process(_O1,_P1,parameters){const input=_O1[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _Q1=input[c];for(let _R1=0;_R1<_Q1.length;++_R1){const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];
_P1[_S1][c][_R1]=_Q1[_R1];}}return this._L1;}}class _T1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._K1();}process(_O1,_P1,parameters){const _U1=_O1[0];const _V1=_O1[1];const output=_P1[0];const gain=parameters.gain;for(let c=0;c<_V1.length;++c){const _Q1=_V1[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1)_W1[_R1]=_Q1[_R1];}for(let c=0;c<_U1.length;++c){const _Q1=_U1[c];const _W1=output[c];
for(let _R1=0;_R1<_Q1.length;++_R1){const _X1=(gain[_R1]!==undefined)?gain[_R1]:gain[0];_W1[_R1]+=_Q1[_R1]*_X1;}}return this._L1;}}registerProcessor("audio-bus-input",_N1);registerProcessor("audio-bus-output",_T1);class _Y1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _Z1=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];this._12=new Float32Array(_02);this._22=new Uint32Array(_02);}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){_W1[_R1]=_Q1[_R1];if(this._22[c]===0)this._12[c]=_Q1[_R1];const _32=(factor[_R1]!==undefined)?factor[_R1]:factor[0];++this._22[c];this._22[c]%=_32;const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];if(_S1>0.0){continue;}let _42=this._12[c];const _X1=(gain[_R1]!==undefined)?gain[_R1]:gain[0];_42*=_X1;_42=Math.max(Math.min(_42,
1.0),-1.0);const _52=(resolution[_R1]!==undefined)?resolution[_R1]:resolution[0];const max=(_42>0.0)?_Y1._Z1[_52]-1:_Y1._Z1[_52];_42=Math.round(_42*max)/max;const _62=(mix[_R1]!==undefined)?mix[_R1]:mix[0];_W1[_R1]*=(1.0-_62);_W1[_R1]+=(_42*_62);}}return this._L1;}}registerProcessor("bitcrusher-processor",_Y1);class _72{constructor(_82=1e-3){this.setTime(_82);}setTime(_82){this._92=Math.exp(-1/(_82*sampleRate));}process(_a2,_b2){return _a2+this._92*(_b2-_a2);}}class _c2{constructor(_d2,_e2){this._f2=new _72(_d2);
this._g2=new _72(_e2);this._h2=_d2;this._i2=_e2;}_j2(_82){if(_82===this._h2)return;this._f2.setTime(_82);this._h2=_82;}_k2(_82){if(_82===this._i2)return;this._g2.setTime(_82);this._i2=_82;}process(_a2,_b2){if(_a2>_b2)return this._f2.process(_a2,_b2);else return this._g2.process(_a2,_b2);}}class _l2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_m2){super();this._K1();const _f2=_l2.parameterDescriptors.find(_n2=>_n2.name==="attack");const _g2=_l2.parameterDescriptors.find(_n2=>_n2.name==="release");
this._o2=new _c2(_f2.defaultValue,_g2.defaultValue);this._p2=0;}process(_q2,_r2,_s2){const input=_q2[0];const output=_r2[0];const bypass=_s2.bypass;const ingain=_s2.ingain;const outgain=_s2.outgain;const threshold=_s2.threshold;const ratio=_s2.ratio;const attack=_s2.attack;const release=_s2.release;if(input.length===0)return this._L1;for(let _R1=0;_R1<input[0].length;++_R1){let frame=input.map(_t2=>_t2[_R1]);output.forEach((_t2,_u2)=>{_t2[_R1]=frame[_u2];});const _v2=(ingain[_R1]!==undefined)?ingain[_R1]:ingain[0];
frame=frame.map(_w2=>_w2*=_v2);const rect=frame.map(_w2=>Math.abs(_w2));const max=Math.max(...rect);const _x2=_y2(max);const _z2=(threshold[_R1]!==undefined)?threshold[_R1]:threshold[0];const _A2=_y2(_z2);const _B2=Math.max(0,_x2-_A2);const _f2=(attack[_R1]!==undefined)?attack[_R1]:attack[0];const _g2=(release[_R1]!==undefined)?release[_R1]:release[0];this._o2._j2(_f2);this._o2._k2(_g2);this._p2=this._o2.process(_B2,this._p2);const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];if(_S1>0)continue;const _52=(ratio[_R1]!==undefined)?ratio[_R1]:ratio[0];
const _C2=(this._p2/_52)-this._p2;const _X1=_D2(_C2);frame=frame.map(_w2=>_w2*=_X1);const _E2=(outgain[_R1]!==undefined)?outgain[_R1]:outgain[0];frame=frame.map(_w2=>_w2*=_E2);output.forEach((_t2,_u2)=>{_t2[_R1]=frame[_u2];});}return this._L1;}}function _y2(_F2){return 20*Math.log10(_F2);}function _D2(_F2){return Math.pow(10,_F2/20);}registerProcessor("compressor-processor",_l2);class _G2 extends AudioWorkletProcessor{static _H2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_G2._H2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];const _I2=(_G2._H2*sampleRate)+1;this.buffer=new Array(_02);this._J2=new Uint32Array(_02);for(let c=0;c<_02;++c)this.buffer[c]=new Float32Array(_I2);
}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){_W1[_R1]=_Q1[_R1];const _z2=(time[_R1]!==undefined)?time[_R1]:time[0];const _K2=this._L2(c,_z2);const _32=(feedback[_R1]!==undefined)?feedback[_R1]:feedback[0];const _M2=_Q1[_R1]+(_K2*_32);this.write(c,_M2);const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];
if(_S1>0.0){continue;}const _62=(mix[_R1]!==undefined)?mix[_R1]:mix[0];_W1[_R1]*=(1-_62);_W1[_R1]+=(_K2*_62);}}return this._L1;}_L2(_N2,_82){const _O2=_82*sampleRate;let _P2=(this._J2[_N2]-~~_O2);let _Q2=(_P2-1);while(_P2<0)_P2+=this.buffer[_N2].length;while(_Q2<0)_Q2+=this.buffer[_N2].length;const frac=_O2-~~_O2;const _R2=this.buffer[_N2][_P2];const _S2=this.buffer[_N2][_Q2];return _R2+(_S2-_R2)*frac;}write(_N2,_T2){++this._J2[_N2];this._J2[_N2]%=this.buffer[_N2].length;this.buffer[_N2][this._J2[_N2]]=_T2;
}}registerProcessor("delay-processor",_G2);class _U2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._K1();}process(_V2,_W2,_X2){const input=_V2[0];const _Y2=_W2[0];const _Z2=_W2[1];for(let c=0;c<input.length;++c){const _Q1=input[c];const __2=_Y2[c];const _03=_Z2[c];for(let _R1=0;_R1<_Q1.length;++_R1){__2[_R1]=_Q1[_R1];_03[_R1]=_Q1[_R1];}}return this._L1;}}class _13 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._K1();}process(_V2,_W2,_X2){const _U1=_V2[0];const _V1=_V2[1];const output=_W2[0];const bypass=_X2.bypass;for(let c=0;c<_V1.length;++c){const _23=_U1[c];const _33=_V1[c];const _W1=output[c];for(let _R1=0;_R1<_23.length;++_R1){const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];if(_S1>0){_W1[_R1]=_33[_R1];}else {_W1[_R1]=_23[_R1];}}}return this._L1;}}registerProcessor("eq-input",_U2);registerProcessor("eq-output",_13);class _43 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._K1();}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){_W1[_R1]=_Q1[_R1];const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];
if(_S1>0.0){continue;}const _X1=(gain[_R1]!==undefined)?gain[_R1]:gain[0];_W1[_R1]*=_X1;}}return this._L1;}}registerProcessor("gain-processor",_43);class _53 extends AudioWorkletProcessor{static get parameterDescriptors(){const _63=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_63),minValue:10.0,maxValue:_63},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];this._73=0;this._83=0;this._93=0;this._a3=0;this._b3=0;this._c3=new Float32Array(_02);this._d3=new Float32Array(_02);this._e3=new Float32Array(_02);this._f3=new Float32Array(_02);this._g3=-1;this._h3=-1;this._i3=-1;}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _j3=(freq.length===1&&q.length===1&&gain.length===1);if(_j3)this._k3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){if(_j3===false){const _32=(freq[_R1]!==undefined)?freq[_R1]:freq[0];const _l3=(q[_R1]!==undefined)?q[_R1]:q[0];const _X1=(gain[_R1]!==undefined)?gain[_R1]:gain[0];this._k3(_32,_l3,_X1);}const _m3=this._93*_Q1[_R1]+this._a3*this._c3[c]+this._b3*this._d3[c]-this._73*this._e3[c]-this._83*this._f3[c];this._d3[c]=this._c3[c];
this._c3[c]=_Q1[_R1];this._f3[c]=this._e3[c];this._e3[c]=_m3;const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];_W1[_R1]=(_S1>0)?_Q1[_R1]:_m3;}}return this._L1;}_k3(_n3,_o3,_p3){if(_n3===this._g3&&_o3===this._h3&&_p3===this._i3)return;const _q3=2*Math.PI*_n3/sampleRate;const _r3=Math.cos(_q3);const _s3=Math.sqrt(_p3);const _t3=_s3+1;const _u3=_s3-1;const _v3=_t3*_r3;const _w3=_u3*_r3;const _x3=_t3-_w3;const _y3=_t3+_w3;const alpha=Math.sin(_q3)/(2*_o3);const _z3=(2*Math.sqrt(_s3)*alpha);const _A3=_x3+_z3;
const _73=2*(_u3-_v3);const _83=_x3-_z3;const _93=_s3*(_y3+_z3);const _a3=-2*_s3*(_u3+_v3);const _b3=_s3*(_y3-_z3);this._73=_73/_A3;this._83=_83/_A3;this._93=_93/_A3;this._a3=_a3/_A3;this._b3=_b3/_A3;this._g3=_n3;this._h3=_o3;this._i3=_p3;}}registerProcessor("hi-shelf-processor",_53);class _B3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _C3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_C3),minValue:10.0,maxValue:_C3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];this._73=0;this._83=0;this._93=0;this._a3=0;this._b3=0;this._c3=new Float32Array(_02);this._d3=new Float32Array(_02);this._e3=new Float32Array(_02);this._f3=new Float32Array(_02);this._D3=-1;this._h3=-1;}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _j3=(cutoff.length===1&&q.length===1);if(_j3)this._k3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){if(_j3===false){const c=(cutoff[_R1]!==undefined)?cutoff[_R1]:cutoff[0];const _l3=(q[_R1]!==undefined)?q[_R1]:q[0];this._k3(c,_l3);}const _m3=this._93*_Q1[_R1]+this._a3*this._c3[c]+this._b3*this._d3[c]-this._73*this._e3[c]-this._83*this._f3[c];this._d3[c]=this._c3[c];this._c3[c]=_Q1[_R1];this._f3[c]=this._e3[c];
this._e3[c]=_m3;const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];_W1[_R1]=(_S1>0)?_Q1[_R1]:_m3;}}return this._L1;}_k3(_E3,_o3){if(_E3===this._D3&&_o3===this._h3)return;const _q3=2*Math.PI*_E3/sampleRate;const alpha=Math.sin(_q3)/(2*_o3);const _r3=Math.cos(_q3);const _A3=1+alpha;const _73=-2*_r3;const _83=1-alpha;const _93=(1+_r3)/2;const _a3=-1-_r3;const _b3=(1+_r3)/2;this._73=_73/_A3;this._83=_83/_A3;this._93=_93/_A3;this._a3=_a3/_A3;this._b3=_b3/_A3;this._D3=_E3;this._h3=_o3;}}registerProcessor("hpf2-processor",
_B3);class _F3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _63=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_63),minValue:10.0,maxValue:_63},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];
this._73=0;this._83=0;this._93=0;this._a3=0;this._b3=0;this._c3=new Float32Array(_02);this._d3=new Float32Array(_02);this._e3=new Float32Array(_02);this._f3=new Float32Array(_02);this._g3=-1;this._h3=-1;this._i3=-1;}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _j3=(freq.length===1&&q.length===1&&gain.length===1);if(_j3)this._k3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){if(_j3===false){const _32=(freq[_R1]!==undefined)?freq[_R1]:freq[0];const _l3=(q[_R1]!==undefined)?q[_R1]:q[0];const _X1=(gain[_R1]!==undefined)?gain[_R1]:gain[0];this._k3(_32,_l3,_X1);}const _m3=this._93*_Q1[_R1]+this._a3*this._c3[c]+this._b3*this._d3[c]-this._73*this._e3[c]-this._83*this._f3[c];this._d3[c]=this._c3[c];this._c3[c]=_Q1[_R1];this._f3[c]=this._e3[c];this._e3[c]=_m3;const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];
_W1[_R1]=(_S1>0)?_Q1[_R1]:_m3;}}return this._L1;}_k3(_n3,_o3,_p3){if(_n3===this._g3&&_o3===this._h3&&_p3===this._i3)return;const _q3=2*Math.PI*_n3/sampleRate;const _r3=Math.cos(_q3);const _s3=Math.sqrt(_p3);const _t3=_s3+1;const _u3=_s3-1;const _v3=_t3*_r3;const _w3=_u3*_r3;const _x3=_t3-_w3;const _y3=_t3+_w3;const alpha=Math.sin(_q3)/(2*_o3);const _z3=(2*Math.sqrt(_s3)*alpha);const _A3=_y3+_z3;const _73=-2*(_u3+_v3);const _83=_y3-_z3;const _93=_s3*(_x3+_z3);const _a3=2*_s3*(_u3-_v3);const _b3=_s3*(_x3-_z3);this._73=_73/_A3;
this._83=_83/_A3;this._93=_93/_A3;this._a3=_a3/_A3;this._b3=_b3/_A3;this._g3=_n3;this._h3=_o3;this._i3=_p3;}}registerProcessor("lo-shelf-processor",_F3);class _G3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _C3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_C3),minValue:10.0,maxValue:_C3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];this._73=0;this._83=0;this._93=0;this._a3=0;this._b3=0;this._c3=new Float32Array(_02);this._d3=new Float32Array(_02);this._e3=new Float32Array(_02);this._f3=new Float32Array(_02);this._D3=-1;this._h3=-1;}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _j3=(cutoff.length===1&&q.length===1);if(_j3)this._k3(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){if(_j3===false){const c=(cutoff[_R1]!==undefined)?cutoff[_R1]:cutoff[0];const _l3=(q[_R1]!==undefined)?q[_R1]:q[0];this._k3(c,_l3);}const _m3=this._93*_Q1[_R1]+this._a3*this._c3[c]+this._b3*this._d3[c]-this._73*this._e3[c]-this._83*this._f3[c];this._d3[c]=this._c3[c];this._c3[c]=_Q1[_R1];this._f3[c]=this._e3[c];this._e3[c]=_m3;const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];_W1[_R1]=(_S1>0)?_Q1[_R1]:_m3;
}}return this._L1;}_k3(_E3,_o3){if(_E3===this._D3&&_o3===this._h3)return;const _q3=2*Math.PI*_E3/sampleRate;const alpha=Math.sin(_q3)/(2*_o3);const _r3=Math.cos(_q3);const _A3=1+alpha;const _73=-2*_r3;const _83=1-alpha;const _93=(1-_r3)/2;const _a3=1-_r3;const _b3=(1-_r3)/2;this._73=_73/_A3;this._83=_83/_A3;this._93=_93/_A3;this._a3=_a3/_A3;this._b3=_b3/_A3;this._D3=_E3;this._h3=_o3;}}registerProcessor("lpf2-processor",_G3);class _H3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _63=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_63),minValue:10.0,maxValue:_63},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];this._73=0;this._83=0;this._93=0;this._a3=0;this._b3=0;this._c3=new Float32Array(_02);this._d3=new Float32Array(_02);
this._e3=new Float32Array(_02);this._f3=new Float32Array(_02);this._g3=-1;this._h3=-1;this._i3=-1;}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _j3=(freq.length===1&&q.length===1&&gain.length===1);if(_j3)this._k3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){if(_j3===false){const _32=(freq[_R1]!==undefined)?freq[_R1]:freq[0];
const _l3=(q[_R1]!==undefined)?q[_R1]:q[0];const _X1=(gain[_R1]!==undefined)?gain[_R1]:gain[0];this._k3(_32,_l3,_X1);}const _m3=this._93*_Q1[_R1]+this._a3*this._c3[c]+this._b3*this._d3[c]-this._73*this._e3[c]-this._83*this._f3[c];this._d3[c]=this._c3[c];this._c3[c]=_Q1[_R1];this._f3[c]=this._e3[c];this._e3[c]=_m3;const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];_W1[_R1]=(_S1>0)?_Q1[_R1]:_m3;}}return this._L1;}_k3(_n3,_o3,_p3){if(_n3===this._g3&&_o3===this._h3&&_p3===this._i3)return;const _q3=2*Math.PI*_n3/sampleRate;
const _r3=Math.cos(_q3);const _s3=Math.sqrt(_p3);const alpha=Math.sin(_q3)/(2*_o3);const _I3=alpha/_s3;const _J3=alpha*_s3;const _A3=1+_I3;const _73=-2*_r3;const _83=1-_I3;const _93=1+_J3;const _a3=_73;const _b3=1-_J3;this._73=_73/_A3;this._83=_83/_A3;this._93=_93/_A3;this._a3=_a3/_A3;this._b3=_b3/_A3;this._g3=_n3;this._h3=_o3;this._i3=_p3;}}registerProcessor("peak-eq-processor",_H3);class _K3{constructor(_L3){this._M3=0;this._N3=0;this.feedback=0;this._O3=0;this.buffer=new Float32Array(_L3);this._P3=0;}process(_T2){
const out=this.buffer[this._P3];this._O3=(this._O3*this._M3)+(out*this._N3);this.buffer[this._P3]=_T2+(this._O3*this.feedback);++this._P3;this._P3%=this.buffer.length;return out;}_Q3(_R3){this.feedback=Math.min(Math.max(0,_R3),1);}_S3(_T3){this._M3=Math.min(Math.max(0,_T3),1);this._N3=1-this._M3;}}class _U3{constructor(_L3){this.feedback=0;this.buffer=new Float32Array(_L3);this._P3=0;}process(_T2){const out=this.buffer[this._P3];this.buffer[this._P3]=_T2+(out*this.feedback);++this._P3;this._P3%=this.buffer.length;
return(out-_T2);}_Q3(_R3){this.feedback=Math.min(Math.max(0,_R3),1);}}class _V3 extends AudioWorkletProcessor{static _W3=8;static _X3=4;static _Y3=0.015;static _Z3=0.4;static __3=0.28;static _04=0.7;static _14=[1116,1188,1277,1356,1422,1491,1557,1617];static _24=[1139,1211,1300,1379,1445,1514,1580,1640];static _34=[556,441,341,225];static _44=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];this._54=-1;this._64=-1;this._74=new Array(_02);this._84=new Array(_02);const _94=[_V3._14,_V3._24];const _a4=[_V3._34,_V3._44];for(let c=0;c<_02;++c){this._74[c]=new Array(_V3._W3);this._84[c]=new Array(_V3._X3);for(let i=0;i<_V3._W3;
++i)this._74[c][i]=new _K3(_94[c%_94.length][i]);for(let i=0;i<_V3._X3;++i)this._84[c][i]=new _U3(_a4[c%_a4.length][i]);}this._b4(0.5);this._S3(0.5);for(let c=0;c<_02;++c)for(let i=0;i<_V3._X3;++i)this._84[c][i]._Q3(0.5);}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _c4=0;_c4<_Q1.length;++_c4){const _R1=(size[_c4]!==undefined)?size[_c4]:size[0];
const _d4=(damp[_c4]!==undefined)?damp[_c4]:damp[0];this._b4(_R1);this._S3(_d4);_W1[_c4]=_Q1[_c4];let out=0;const _42=_Q1[_c4]*_V3._Y3;for(let i=0;i<_V3._W3;++i)out+=this._74[c][i].process(_42);for(let i=0;i<_V3._X3;++i)out=this._84[c][i].process(out);const _S1=(bypass[_c4]!==undefined)?bypass[_c4]:bypass[0];if(_S1>0.0){continue;}const _62=(mix[_c4]!==undefined)?mix[_c4]:mix[0];_W1[_c4]*=(1-_62);_W1[_c4]+=(out*_62);}}return this._L1;}_b4(_L3){if(_L3===this._54)return;const size=(_L3*_V3.__3)+_V3._04;for(let c=0;
c<this._74.length;++c)for(let i=0;i<_V3._W3;++i)this._74[c][i]._Q3(size);this._54=_L3;}_S3(_T3){if(_T3===this._64)return;const damp=_T3*_V3._Z3;for(let c=0;c<this._74.length;++c)for(let i=0;i<_V3._W3;++i)this._74[c][i]._S3(damp);this._64=_T3;}}registerProcessor("reverb1-processor",_V3);class _e4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(__1){super();this._K1();const _02=__1.outputChannelCount[0];this._f4=new Array(_02).fill(1.0);this._g4=new Array(_02).fill(0.0);this._h4=new Array(_02).fill(_i4._j4._k4);this._l4=new Array(_02);for(let c=0;c<_02;++c){this._l4[c]=new _m4();
this._l4[c]._n4(sampleRate);this._l4[c]._o4(this._f4[c]);this._l4[c]._p4(this._h4[c]);if(c%2===1){this._l4[c]._q4(this._g4[c]);}}}process(_O1,_P1,parameters){const input=_O1[0];const output=_P1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _Q1=input[c];const _W1=output[c];for(let _R1=0;_R1<_Q1.length;++_R1){_W1[_R1]=_Q1[_R1];const _52=(rate[_R1]!==undefined)?rate[_R1]:rate[0];
const _r4=(offset[_R1]!==undefined)?offset[_R1]:offset[0];const _s4=(shape[_R1]!==undefined)?shape[_R1]:shape[0];this._t4(c,_52,_r4,_s4);const _u4=this._l4[c]._L2();const _S1=(bypass[_R1]!==undefined)?bypass[_R1]:bypass[0];if(_S1>0.0){continue;}const i=(intensity[_R1]!==undefined)?intensity[_R1]:intensity[0];const out=_Q1[_R1]*_u4*i;_W1[_R1]*=(1.0-i);_W1[_R1]+=out;}}return this._L1;}_t4(_N2,_v4,_w4,_x4){if(_v4!==this._f4[_N2]){this._l4[_N2]._o4(_v4);this._f4[_N2]=_v4;}if(_w4!==this._g4[_N2]){if(_N2%2===1){
this._l4[_N2]._q4(_w4);}this._g4[_N2]=_w4;}if(_x4!==this._h4[_N2]){this._l4[_N2]._p4(_x4);this._h4[_N2]=_x4;}}}registerProcessor("tremolo-processor",_e4);function _i4(){}_i4._j4={_k4:0,_y4:1,_z4:2,_A4:3,_B4:4,_C4:5};_i4._D4=function(_E4){return 1.0-_E4;};_i4._F4=function(_E4){return _E4;};_i4._G4=function(_E4){return 0.5*(Math.sin((_E4*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_i4._H4=function(_E4){if(_E4<0.5){return 0.0;}return 1.0;};_i4._I4=function(_E4){if(_E4<0.5){return 2.0*_E4;}return 2.0-(2.0*_E4);};_i4._J4=[_i4._D4,
_i4._F4,_i4._G4,_i4._H4,_i4._I4];_K4._L4=512;_K4._M4=1.0/_K4._L4;function _K4(_N4){this.data=new Float32Array(_K4._L4);for(let i=0;i<_K4._L4;++i){this.data[i]=_N4(i*_K4._M4);}}_K4.prototype._L2=function(_E4){_E4=Math.max(0.0,_E4);_E4=Math.min(_E4,1.0);const _O4=_E4*_K4._L4;const _P4=~~_O4;const _Q4=_O4-_P4;let _P2=_P4;let _Q2=_P2+1;if(_P2>=_K4._L4){_P2-=_K4._L4;}if(_Q2>=_K4._L4){_Q2-=_K4._L4;}const _R2=this.data[_P2];const _S2=this.data[_Q2];return _R2+(_S2-_R2)*_Q4;};_m4._R4=[];_m4._S4=false;_m4._T4=0.0;_m4._63=20.0;
function _m4(){this._U4=48000;this.shape=_i4._j4._z4;this.freq=1.0;this._V4=0.0;this._M4=0.0;this._W4=0.0;if(_m4._S4==true){return;}for(let i=0;i<_i4._j4._C4;++i){_m4._R4[i]=new _K4(_i4._J4[i]);}_m4._S4=true;}_m4._X4=function(){return(_m4._S4==true);};_m4.prototype._n4=function(_Y4){this._U4=_Y4;this._Z4();};_m4.prototype._o4=function(_n3){_n3=Math.max(_m4._T4,_n3);_n3=Math.min(_n3,_m4._63);this.freq=_n3;this._Z4();};_m4.prototype._q4=function(_w4){_w4=Math.max(0.0,_w4);_w4=Math.min(_w4,1.0);const __4=_w4-this._W4;
this._W4=_w4;this._V4+=__4;while(this._V4>=1.0){this._V4-=1.0;}while(this._V4<0.0){this._V4+=1.0;}};_m4.prototype._p4=function(_x4){_x4=Math.max(0,_x4);_x4=Math.min(_x4,_i4._j4._C4-1);this.shape=_x4;};_m4.prototype._L2=function(){const result=_m4._R4[this.shape]._L2(this._V4);this._V4+=this._M4;while(this._V4>=1.0){this._V4-=1.0;}return result;};_m4.prototype._Z4=function(){this._M4=this.freq/this._U4;};